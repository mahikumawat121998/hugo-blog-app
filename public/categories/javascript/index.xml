<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Lama dev blog</title>
    <link>http://localhost:61912/categories/javascript/</link>
    <description>Recent content in JavaScript on Lama dev blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:61912/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Authentication with Next.js and Prisma</title>
      <link>http://localhost:61912/authentication-nextjs-prisma/</link>
      <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:61912/authentication-nextjs-prisma/</guid>
      <description>&lt;p&gt;Test Connection&lt;/p&gt;</description>
    </item>
    <item>
      <title>Express.js vs NestJS: Which One Should You Choose?</title>
      <link>http://localhost:61912/express-js-vs-nest-js/</link>
      <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:61912/express-js-vs-nest-js/</guid>
      <description>&lt;p&gt;When it comes to backend development in &lt;strong&gt;Node.js&lt;/strong&gt;, two names frequently stand out: &lt;strong&gt;Express.js&lt;/strong&gt; and &lt;strong&gt;NestJS&lt;/strong&gt;. While both are powerful and widely used, they differ greatly in terms of architecture, scalability, learning curve, and developer experience.&lt;/p&gt;&#xA;&lt;p&gt;In this blog post, letâ€™s explore the differences, use cases, pros and cons of &lt;strong&gt;Express.js&lt;/strong&gt; and &lt;strong&gt;NestJS&lt;/strong&gt;, so you can decide which framework suits your next project best.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-what-is-expressjs&#34;&gt;ðŸ§  What is Express.js?&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://expressjs.com/&#34;&gt;Express.js&lt;/a&gt; is a &lt;strong&gt;minimal and flexible Node.js web application framework&lt;/strong&gt; that provides a robust set of features for web and mobile applications. Itâ€™s been around since 2010 and is known for its simplicity and speed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Temporal Dead Zone(TDZ) in JavaScript</title>
      <link>http://localhost:61912/temporal-dead-zone/</link>
      <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:61912/temporal-dead-zone/</guid>
      <description>&lt;p&gt;Letâ€™s start with a silly programming joke, shall we ? ðŸ˜œ&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;How many programmers does it take to change a light bulb?&#xA;None. It&amp;rsquo;s a hardware problem.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;JavaScript is a versatile language, but it also comes with some intricacies that can catch even seasoned developers off guard. One such concept is the Temporal Dead Zone (TDZ). In this article, we will explore TDZ, why it exists, and how it impacts your code with real-world examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is the Currying function in js</title>
      <link>http://localhost:61912/currying-function/</link>
      <pubDate>Wed, 22 Nov 2023 16:55:24 +0100</pubDate>
      <guid>http://localhost:61912/currying-function/</guid>
      <description>&lt;p&gt;Have you noticed how from all of the classic Array methods in JavaScript to iterate and perform some transformations over that data such as map and forEach the one that never really gets understood is reduce?&lt;/p&gt;&#xA;&lt;p&gt;Well, the same happens with Currying in Functional Programming. Everyone is all in for higher-order functions, or even pure functions with no side effects, but the minute you start talking about currying, their faces go like this:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
